@using BlazorYahtzee.Models
@using BlazorYahtzee.Models.Categories
@using BlazorYahtzee.Models.Columns
@using BlazorYahtzee.Models.Modes

<div class="row">
    <div class="@Mode.CategoryCssClassName p-2 font-weight-bold text-right">
        Yahtzee Bonus
    </div>
    @foreach (var column in Mode.Columns)
    {
        <div class="@Mode.ColumnCssClassName p-2 font-weight-bold border text-right">
            @if (Player.Plays(column.Type).HasMultipleYahtzeePlays())
            {
                @Player.Plays(column.Type).ScoreForYahtzeeBonus()
            }
            else
            {
                <text>0</text>
            }
            @if (Player.Dice.HasYahtzee() && Player.Plays(column.Type).HasYahtzeePlayForBonus() && !Player.HasForcedPlay && !IsStartOfTurn && !IsRolling)
            {
                <button role="button" class="btn btn-danger btn-sm ml-2" @onclick="@(async () => await ClaimYahtzeeBonus(column.Type))">+ 100</button>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public IMode Mode { get; set; }

    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public bool IsStartOfTurn { get; set; }

    [Parameter]
    public bool IsRolling { get; set; }

    [Parameter]
    public EventCallback OnYahtzeeBonusClaimed { get; set; }

    private async Task ClaimYahtzeeBonus(ColumnType column)
    {
        var yahtzee = new Yahtzee();
        Player.Plays(column).Add(yahtzee, yahtzee.PointsFor(Player));
        Player.ForcePlay();
        await OnYahtzeeBonusClaimed.InvokeAsync();
    }
}
