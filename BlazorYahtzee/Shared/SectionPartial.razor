@using BlazorYahtzee.Models
@using BlazorYahtzee.Models.Categories
@using BlazorYahtzee.Models.Modes

<div class="row">
    <div class="@Mode.CategoryCssClassName p-2 border">
        @Category.Name
    </div>
    @foreach (var column in Mode.Columns)
    {
        @if (Player.Plays(column).HasPlay(Category))
        {
            <div class="@Mode.ColumnCssClassName p-2 border text-right">
                @Player.Plays(column).ScoreFor(Category)
            </div>
        }
        else
        {
            <div class="@Mode.ColumnCssClassName p-1 border text-right">
                @if (!IsRolling)
                {
                    if (ShowClaimButton(column))
                    {
                        <button type="button" class="btn btn-primary btn-sm px-3" @onclick="@(async () => await ClaimCategory(Category, column))">@Category.PointsFor(Player)</button>
                    }
                    if (ShowScratchButton(column))
                    {
                        <button type="button" class="btn btn-outline-primary btn-sm px-3" @onclick="@(async () => await ClaimCategory(Category, column))">@Category.PointsFor(Player)</button>
                    }
                }
                else
                {
                    // TODO: Show the temporary points assigned to the category
                }
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public IMode Mode { get; set; }

    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public ICategory Category { get; set; }

    [Parameter]
    public bool IsStartOfTurn { get; set; }

    [Parameter]
    public bool IsEndOfTurn { get; set; }

    [Parameter]
    public bool IsRolling { get; set; }

    [Parameter]
    public EventCallback OnCategoryClaimed { get; set; }

    private async Task ClaimCategory(ICategory category, ColumnType column)
    {
        Player.Plays(column).Add(category, category.PointsFor(Player));
        await OnCategoryClaimed.InvokeAsync();
    }

    private bool ShowClaimButton(ColumnType column)
    {
        return (!IsStartOfTurn || Player.HasForcedPlay) &&
               Category.CanBePlayed(Player, column) &&
               Category.CanBeClaimedInFull(Player);
    }

    private bool ShowScratchButton(ColumnType column)
    {
        return (IsEndOfTurn || Player.HasForcedPlay) &&
               Category.CanBePlayed(Player, column) &&
               !Category.CanBeClaimedInFull(Player);
    }
}
