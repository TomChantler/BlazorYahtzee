@page "/"

@using BlazorYahtzee.Models
@using BlazorYahtzee.Models.Categories
@using BlazorYahtzee.Models.Modes
@using BlazorYahtzee.Services

@inject IScoreService ScoreService

<div class="container">
    <div class="row">
        @if (Game == null)
        {
            <div class="col-sm-6">
                <div class="card mb-2">
                    <div class="card-body">
                        <h5 class="card-title">Yahtzee</h5>
                        <p class="card-text">
                            Standard Yahtzee game.
                            <ul>
                                <li>Columns: 1 (Free)</li>
                                <li>Categories: 13</li>
                                <li>Turns: 13</li>
                            </ul>
                        </p>
                        <button class="btn btn-primary" @onclick="@(() => NewGame(ModeType.Standard))">Yahtzee</button>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Yahtzee Plus</h5>
                        <p class="card-text">
                            Enhanced Yahtzee game.
                            <ul>
                                <li>Columns: 4 (Down, Up, Free, Announce)</li>
                                <li>Categories: 15</li>
                                <li>Turns: 60</li>
                            </ul>
                        </p>
                        <button class="btn btn-primary" @onclick="@(() => NewGame(ModeType.Plus))">Yahtzee Plus</button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <CascadingValue Value="Game">
                <div class="col-9">
                    <HeaderFooterPartial />
                    @foreach (var category in Game.UpperSectionCategories())
                    {
                        <SectionPartial Category="category"
                                        IsRolling="IsRolling"
                                        OnCategoryDeclared="OnCategoryDeclared"
                                        OnCategoryClaimed="OnCategoryClaimed" />
                    }
                    <UpperSectionTotalPartial />
                    @foreach (var category in Game.LowerSectionCategories())
                    {
                        <SectionPartial Category="category"
                                        IsRolling="IsRolling"
                                        OnCategoryDeclared="OnCategoryDeclared"
                                        OnCategoryClaimed="OnCategoryClaimed" />
                    }
                    <YahtzeeBonusPartial IsRolling="IsRolling"
                                         OnYahtzeeBonusClaimed="OnYahtzeeBonusClaimed" />
                    <LowerSectionTotalPartial />
                    <HeaderFooterPartial />
                </div>
                <div class="col-3 text-center">
                    @foreach (var die in Player.Dice.Collection)
                    {
                        <DiePartial Die="die" />
                    }
                    <div class="row mt-3 mb-4">
                        <div class="col">
                            @if (!Game.Player.IsEndOfTurn() && !Game.IsOver())
                            {
                                if (IsRolling)
                                {
                                    <button class="btn btn-primary disabled">Roll</button>
                                }
                                else
                                {
                                    <button class="btn btn-primary" @onclick="@(() => RollDice())">Roll</button>
                                }
                            }
                            else if (Game.IsOver())
                            {
                                <div class="font-weight-bold">Game Over</div>
                                <div>Final score: @Player.TotalScore()</div>
                                <div class="mt-2">
                                    <button class="btn btn-success" @onclick="@(() => Game = null)">New Game</button>
                                </div>
                            }
                            else
                            {
                                <button class="btn btn-primary disabled">Roll</button>
                                <div class="mt-4">
                                    @if (Player.HasForcedPlay)
                                    {
                                        <span>A score must be marked after claiming a Yahtzee bonus.</span>
                                    }
                                    else
                                    {
                                        <span>Mark a score.</span>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                    <div class="mb-2 text-center">
                        <div>Rolls</div>
                        <div class="font-weight-bold">@Game.CurrentRoll()/@Game.Mode.NumberOfDice</div>
                    </div>
                    <div class="mb-3 text-center">
                        <div>Turns</div>
                        <div class="font-weight-bold">@Game.CurrentTurn()/@Game.Mode.NumberOfTurns</div>
                    </div>
                    @if (!Game.IsOver())
                    {
                        <button class="btn btn-success btn-sm" @onclick="@(() => Game = null)">Reset</button>
                    }
                </div>
            </CascadingValue>
        }
    </div>
    @if (Game != null)
    {
        <div class="row">
            <div class="col">
                <div class="accordion mt-3" id="legenda">
                    <div class="card">
                        <div class="card-header p-0" id="legenda-heading">
                            <h2 class="mb-0">
                                <button class="btn btn-link btn-block text-left" type="button" data-toggle="collapse" data-target="#legenda-content" aria-expanded="false" aria-controls="legenda-content">
                                    Legenda
                                </button>
                            </h2>
                        </div>
                        <div id="legenda-content" class="collapse" aria-labelledby="legenda-heading" data-parent="#legenda">
                            <div class="card-body">
                                <p><h5 class="far fa-arrow-alt-circle-down mb-0"></h5> The column fills down from top to bottom.</p>
                                <p><h5 class="far fa-arrow-alt-circle-up mb-0"></h5> The column fills up from the bottom to top.</p>
                                <p><h5 class="far fa-smile mb-0"></h5> The column is filled without any restrictions.</p>
                                <p><h5 class="fas fa-bullhorn mb-0"></h5> To make an entry in this column you have to submit declarations after first turn giving the desired category. The entry can not then be changed.</p>
                                <p><button type="button" class="btn btn-outline-warning btn-sm">D</button> Declare category.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code
{
    public Game Game { get; set; }
    private Player Player { get; set; }

    private bool IsRolling { get; set; }

    protected override void OnInitialized()
    {
    }

    private void NewGame(ModeType modeType)
    {
        Game = new Game(modeType);
        Player = Game.Player;
    }

    private async Task RollDice()
    {
        IsRolling = true;

        Game.Player.RollDice();

        var random = new Random();

        foreach (var die in Player.Dice.NotHeldCollection)
        {
            await Task.Delay(200);
            die.AssignValue(random.Next(1, 7));
            StateHasChanged();
        }

        if (Game.Player.IsEndOfTurn())
        {
            Game.Player.HoldAllDice();
        }

        IsRolling = false;
    }

    private async Task NextTurn()
    {
        Game.NextTurn();

        if (Game.IsOver())
        {
            await ScoreService.AddScoreAsync(Game);
        }
    }

    public async Task OnCategoryDeclared(ICategory category)
    {
        await Task.CompletedTask;
        Game.Player.DeclareCategory(category);
    }

    public async Task OnCategoryClaimed()
    {
        await NextTurn();
    }

    public async Task OnYahtzeeBonusClaimed()
    {
        await Task.CompletedTask;
        Game.Player.RemoveRemainingRolls();
    }
}
