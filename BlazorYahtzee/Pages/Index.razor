@page "/"

@using BlazorYahtzee.Models
@using BlazorYahtzee.Models.Categories
@using BlazorYahtzee.Models.Modes
@using BlazorYahtzee.Services

@inject IScoreService ScoreService

<div class="container">
    <div class="row">
        @if (Game == null)
        {
            <div class="col-sm-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Yahtzee</h5>
                        <p class="card-text">
                            Standard Yahtzee game.
                            <ul>
                                <li>Columns: 1 (Free)</li>
                                <li>Categories: 13</li>
                                <li>Turns: 13</li>
                            </ul>
                        </p>
                        <button class="btn btn-primary" @onclick="@(() => NewGame(ModeType.Standard))">Yahtzee</button>
                    </div>
                </div>
            </div>
            <div class="col-sm-6">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Yahtzee Plus</h5>
                        <p class="card-text">
                            Enhanced Yahtzee game.
                            <ul>
                                <li>Columns: 4 (Down, Up, Free, Announce)</li>
                                <li>Categories: 15</li>
                                <li>Turns: 60</li>
                            </ul>
                        </p>
                        <button class="btn btn-primary" @onclick="@(() => NewGame(ModeType.Plus))">Yahtzee Plus</button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="col-9">
                <CascadingValue Value="Game">
                    <HeaderFooterPartial />
                    @foreach (var category in UpperSectionCategories())
                    {
                        <SectionPartial Category="category"
                                        IsStartOfTurn="IsStartOfTurn()"
                                        IsEndOfTurn="IsEndOfTurn()"
                                        IsRolling="IsRolling"
                                        OnCategoryClaimed="OnCategoryClaimed" />
                    }
                    <UpperSectionTotalPartial />
                    @foreach (var category in LowerSectionCategories())
                    {
                        <SectionPartial Category="category"
                                        IsStartOfTurn="IsStartOfTurn()"
                                        IsEndOfTurn="IsEndOfTurn()"
                                        IsRolling="IsRolling"
                                        OnCategoryClaimed="OnCategoryClaimed" />
                    }
                    <YahtzeeBonusPartial IsStartOfTurn="IsStartOfTurn()"
                                         IsRolling="IsRolling"
                                         OnYahtzeeBonusClaimed="OnYahtzeeBonusClaimed" />
                    <LowerSectionTotalPartial />
                    <HeaderFooterPartial />
                </CascadingValue>
            </div>
            <div class="col-3 text-center">
                @foreach (var die in Player.Dice.Collection)
                {
                    <DiePartial Die="die" IsStartOfTurn="IsStartOfTurn()" />
                }
                <div class="row mt-3 mb-4">
                    <div class="col">
                        @if (!IsEndOfTurn() && !Game.IsOver())
                        {
                            if (IsRolling)
                            {
                                <button class="btn btn-primary disabled">Roll</button>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="@(() => RollDice())">Roll</button>
                            }
                        }
                        else if (Game.IsOver())
                        {
                            <div class="font-weight-bold">Game Over</div>
                            <div>Final score: @Player.TotalScore()</div>
                            <div class="mt-2">
                                <button class="btn btn-success" @onclick="@(() => Game = null)">New Game</button>
                            </div>
                        }
                        else
                        {
                            <button class="btn btn-primary disabled">Roll</button>
                            <div class="mt-4">
                                @if (Player.HasForcedPlay)
                                {
                                    <span>A score must be marked after claiming a Yahtzee bonus.</span>
                                }
                                else
                                {
                                    <span>Please, claim a play.</span>
                                }
                            </div>
                        }
                    </div>
                </div>
                <div class="mb-2 text-center">
                    <div>Rolls</div>
                    <div class="font-weight-bold">@CurrentRoll()/3</div>
                </div>
                <div class="mb-3 text-center">
                    <div>Turns</div>
                    <div class="font-weight-bold">@CurrentTurn()/@Game.Mode.NumberOfTurns</div>
                </div>
                @if (!Game.IsOver())
                {
                    <button class="btn btn-warning btn-sm" @onclick="@(() => Game = null)">Reset</button>
                }
            </div>
        }
    </div>
</div>

@code
{
    public Game Game { get; set; }
    private Player Player { get; set; }

    private IEnumerable<ICategory> Categories { get; set; } = new List<ICategory>();

    private IEnumerable<ICategory> UpperSectionCategories() => Categories.Where(x => x.Section == SectionType.Upper);
    private IEnumerable<ICategory> LowerSectionCategories() => Categories.Where(x => x.Section == SectionType.Lower);

    private int RollsRemaining { get; set; } = 3;

    private bool IsRolling { get; set; }

    protected override void OnInitialized()
    {
    }

    private void NewGame(ModeType modeType)
    {
        Game = new Game(modeType);
        Categories = Game.Mode.Categories;
        Player = Game.Player;
        RollsRemaining = 3;
    }

    private bool IsStartOfTurn()
    {
        return RollsRemaining == 3;
    }

    private bool IsEndOfTurn()
    {
        return RollsRemaining == 0;
    }

    private async Task RollDice()
    {
        IsRolling = true;
        RollsRemaining--;

        var random = new Random();

        foreach (var die in Player.Dice.NotHeldCollection)
        {
            die.Roll();
        }

        foreach (var die in Player.Dice.NotHeldCollection)
        {
            await Task.Delay(200);
            die.AssignValue(random.Next(1, 7));
            die.Stop();
            StateHasChanged();
        }

        if (IsEndOfTurn())
        {
            foreach (var die in Player.Dice.NotHeldCollection)
            {
                die.Hold();
            }
        }

        IsRolling = false;
    }

    private int CurrentRoll()
    {
        return Game.IsOver() ? 3 : 3 - RollsRemaining;
    }

    private int CurrentTurn()
    {
        return Game.IsOver() ? Game.Mode.NumberOfTurns : Game.Mode.NumberOfTurns - Game.TurnsRemaining + 1;
    }

    private async Task NextTurn()
    {
        Game.TurnsRemaining--;
        RollsRemaining = 3;
        Player.ResetTurn();

        if (Game.IsOver())
        {
            await ScoreService.AddScoreAsync(Game);
        }
    }

    public async Task OnCategoryClaimed()
    {
        await NextTurn();
    }

    public async Task OnYahtzeeBonusClaimed()
    {
        await Task.CompletedTask;
        RollsRemaining = 0;
    }
}
