@page "/my-scores"

@using BlazorYahtzee.Models
@using BlazorYahtzee.Models.Modes
@using BlazorYahtzee.Services

@inject IScoreService ScoreService

<h3 class="mb-4">My Scores</h3>

<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
        <a class="nav-link active" id="home-tab" data-toggle="tab" href="#scores" role="tab" aria-controls="standard" aria-selected="true" @onclick="@(async () => await GetScores(ModeType.Standard))">Standard</a>
    </li>
    <li class="nav-item" role="presentation">
        <a class="nav-link" id="profile-tab" data-toggle="tab" href="#scores" role="tab" aria-controls="plus" aria-selected="false" @onclick="@(async () => await GetScores(ModeType.Plus))">Plus</a>
    </li>
</ul>
<div class="tab-content" id="myTabContent">
    <div class="tab-pane fade show active" id="scores" role="tabpanel" aria-labelledby="home-tab">
        <table class="table table-bordered table-hover">
            <thead>
            <tr>
                <th scope="row"></th>
                <th scope="col">Points</th>
                <th scope="col">Date</th>
            </tr>
            </thead>
            <tbody>
            @for (int i = 0; i < Scores.Count(); i++)
            {
                var score = Scores.ElementAt(i);
                <tr>
                    <td>@(i + 1)</td>
                    <td>@score.Points</td>
                    <td>@score.TimeStamp</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    private IEnumerable<Score> Scores { get; set; } = new List<Score>();

    protected override async Task OnInitializedAsync()
    {
        await GetScores(ModeType.Standard);
    }

    private async Task GetScores(ModeType modeType)
    {
        var scores = await ScoreService.GetScoresAsync(modeType);
        Scores = scores.OrderByDescending(x => x.Points).ToList();
    }
}
